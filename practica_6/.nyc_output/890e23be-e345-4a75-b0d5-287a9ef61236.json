{"/home/usuario/DSI/practica_6/ull-esit-inf-dsi-20-21-prct06-generics-solid-alu0101202952/practica_6/src/ejercicio-pe102.ts":{"path":"/home/usuario/DSI/practica_6/ull-esit-inf-dsi-20-21-prct06-generics-solid-alu0101202952/practica_6/src/ejercicio-pe102.ts","statementMap":{"0":{"start":{"line":7,"column":0},"end":{"line":7,"column":62}},"1":{"start":{"line":8,"column":0},"end":{"line":8,"column":30}},"2":{"start":{"line":24,"column":8},"end":{"line":24,"column":24}},"3":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"4":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"5":{"start":{"line":29,"column":12},"end":{"line":29,"column":59}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":41}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":50}},"8":{"start":{"line":37,"column":8},"end":{"line":37,"column":54}},"9":{"start":{"line":40,"column":8},"end":{"line":40,"column":47}},"10":{"start":{"line":43,"column":8},"end":{"line":43,"column":48}},"11":{"start":{"line":46,"column":0},"end":{"line":46,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":26,"column":5}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":29},"end":{"line":32,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":16},"end":{"line":35,"column":5}},"line":33},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":24},"end":{"line":38,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":15},"end":{"line":41,"column":5}},"line":39},"5":{"name":"(anonymous_5)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":20},"end":{"line":44,"column":5}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},{"start":{"line":28,"column":8},"end":{"line":30,"column":9}}],"line":28}},"s":{"0":1,"1":1,"2":2,"3":2,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1},"f":{"0":2,"1":1,"2":1,"3":1,"4":1,"5":1},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/DSI/practica_6/ull-esit-inf-dsi-20-21-prct06-generics-solid-alu0101202952/practica_6/src/ejercicio-pe102.ts","sources":["/home/usuario/DSI/practica_6/ull-esit-inf-dsi-20-21-prct06-generics-solid-alu0101202952/practica_6/src/ejercicio-pe102.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAYH;;;GAGG;AACH;;;;EAIE;AAEF;;;GAGG;AACH,MAAa,YAAY;IAOvB;QACE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACpB,CAAC;IAGM,MAAM,CAAC,eAAe;QAC3B,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;YAC9B,YAAY,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;SAChD;QACD,OAAO,YAAY,CAAC,YAAY,CAAC;IACnC,CAAC;IAED,SAAS;QACP,OAAO,YAAY,CAAC,YAAY,CAAC,QAAQ,CAAC;IAC5C,CAAC;IAED,SAAS,CAAC,QAAgB;QACxB,YAAY,CAAC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAChD,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC;IACzC,CAAC;IAED,QAAQ,CAAC,KAAS;QAChB,YAAY,CAAC,YAAY,CAAC,KAAK,GAAG,KAAK,CAAC;IAC1C,CAAC;CAcF;AAhDD,oCAgDC;AAED;;;GAGG;AACH;;;;;;GAMG;AAGH;;;;;;;;;;;;GAYG","sourcesContent":["/**\n * ## Ejercicio propuesto clase LUNES PE 102\n * ### Desarrollo de Sistemas Informáticos\n * > - ANDREA CALERO CARO > alu0101202952\n */\n\n/**\n * @type RandomNumberItem, este patrón creacional singleton permite instanciar una clase\n * una única vez, generalmente, para controlar el acceso a algún tipo de recurso compartido\n * como, en este caso un generador de números aleatorios.\n * Además, poner en práctica los principios SOLID.\n */\n export type RandomNumberItem = {\n    item: number;\n }\n\n/**\n * @enum ,\n * y así poner en práctica los principios SOLID, Single Responsability and Open-closed\n */\n/*\nexport enum{\n\n}\n*/\n\n/**\n * @class ,\n * y así poner en práctica los principios SOLID, Single Responsability and Open-closed\n */\nexport class RandomNumber {\n\n  private items: RandomNumberItem[];\n  private inNumber: number;\n\n  private static randomNumber: RandomNumber;\n\n  constructor() {\n    this.items = [];\n    this.inNumber = 0;\n  }\n\n  \n  public static getRandomNumber(): RandomNumber {\n    if (!RandomNumber.randomNumber) {\n      RandomNumber.randomNumber = new RandomNumber();\n    }\n    return RandomNumber.randomNumber;\n  }\n\n  getNumber(){\n    return RandomNumber.randomNumber.inNumber;\n  }\n\n  setNumber(inNumber: number){\n    RandomNumber.randomNumber.inNumber = inNumber;\n  }\n\n  getItems(){\n    return RandomNumber.randomNumber.items;\n  }\n\n  setItems(items: []){\n    RandomNumber.randomNumber.items = items;\n  }\n\n  /**\n   *  getItem(index: number) {\n    if (index >= KnapsackInstance.knapsackInstance.getNumberOfItems()) {\n      return undefined;\n    }\n    return KnapsackInstance.knapsackInstance.items[index];\n  }\n\n  addItem(item: KnapsackItem) {\n    KnapsackInstance.knapsackInstance.items.push(item);\n  }\n   */\n}\n\n/**\n * @class ,\n * y así poner en práctica los principios SOLID, Single Responsability and Open-closed\n */\n/*export class ClassSon extends Class1{\n\n    print() {\n        console.log(`I am a ${this.getName()}, I have ${this.getSides()} sides, ` +\n          `and my area is ${this.getArea()}`);\n    }\n}*/\n\n\n/*\n export class  FigureCollection <T extends Class1> {\n    private figures: Set<T>;\n\n    constructor(figures: T[]) {\n      this.figures = new Set(figures);\n    }\n\n\n    print() {\n        this.figures.forEach((figure) => figure.print());\n    }\n}*/\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0d39646cb99830219ab107ce664ed6abe8c1cc32","contentHash":"ee7c736f959a9691e56f672f2d93e32a6edb0557d25ba6d0fcc72b55b5a039e6"}}